---
// src/pages/index.astro
interface Item {
	id: number;
	name: string;
	quantity: number;
}

// Fetch shopping items on page load
let items: Item[] = [];
let error: string | null = null;

try {
	const response = await fetch(`${Astro.url.origin}/api/items`);
	if (response.ok) {
		items = await response.json();
	} else {
		error = 'Failed to load items';
	}
} catch (err) {
	error = err instanceof Error ? err.message : 'An error occurred';
}
---

<html lang="en">
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<title>Shopping List</title>
	<style>
		body {
			font-family: Arial, sans-serif;
			max-width: 600px;
			margin: 0 auto;
			padding: 20px;
			background: #f5f5f5;
		}

		.container {
			background: white;
			padding: 20px;
			border-radius: 8px;
			box-shadow: 0 2px 4px rgba(0,0,0,0.1);
		}

		h1 {
			color: #333;
			margin-bottom: 20px;
		}

		.add-form {
			display: flex;
			gap: 10px;
			margin-bottom: 20px;
			padding: 15px;
			background: #f9f9f9;
			border-radius: 5px;
		}

		input {
			padding: 8px;
			border: 1px solid #ddd;
			border-radius: 4px;
		}

		input[type="text"] {
			flex: 1;
		}

		input[type="number"] {
			width: 80px;
		}

		button {
			padding: 8px 16px;
			background: #007bff;
			color: white;
			border: none;
			border-radius: 4px;
			cursor: pointer;
		}

		button:hover {
			background: #0056b3;
		}

		button.delete {
			background: #dc3545;
			padding: 4px 8px;
			font-size: 12px;
		}

		button.delete:hover {
			background: #c82333;
		}

		.item-list {
			list-style: none;
			padding: 0;
		}

		.item {
			display: flex;
			justify-content: space-between;
			align-items: center;
			padding: 10px;
			border-bottom: 1px solid #eee;
		}

		.item:last-child {
			border-bottom: none;
		}

		.item-info {
			flex: 1;
		}

		.item-name {
			font-weight: bold;
			margin-bottom: 4px;
		}

		.item-quantity {
			color: #666;
			font-size: 14px;
		}

		.error {
			color: #dc3545;
			background: #f8d7da;
			padding: 10px;
			border-radius: 4px;
			margin-bottom: 20px;
		}

		.success {
			color: #155724;
			background: #d4edda;
			padding: 10px;
			border-radius: 4px;
			margin-bottom: 20px;
		}

		.empty {
			text-align: center;
			color: #666;
			padding: 20px;
		}
	</style>
</head>
<body>
<div class="container">
	<h1>Shopping List</h1>

	<div id="message"></div>

	<form class="add-form" id="addItemForm">
		<input
			type="text"
			id="itemName"
			placeholder="Item name"
			required
		/>
		<input
			type="number"
			id="itemQuantity"
			placeholder="Qty"
			min="1"
			value="1"
			required
		/>
		<button type="submit">Add Item</button>
	</form>

	{error ? (
		<div class="error">{error}</div>
	) : (
		<ul class="item-list" id="itemList">
			{items.length === 0 ? (
				<div class="empty">No items in your shopping list yet.</div>
			) : (
				items.map((item: Item) => (
					<li class="item" data-id={item.id}>
						<div class="item-info">
							<div class="item-name">{item.name}</div>
							<div class="item-quantity">Quantity: {item.quantity}</div>
						</div>
						<button
							class="delete"
							data-id={item.id}
						>
							Delete
						</button>
					</li>
				))
			)}
		</ul>
	)}
</div>

<script>
	// Show message to user
	function showMessage(text: string, type: string = 'success'): void {
		const messageDiv = document.getElementById('message');
		if (messageDiv) {
			messageDiv.innerHTML = `<div class="${type}">${text}</div>`;
			setTimeout(() => {
				if (messageDiv) {
					messageDiv.innerHTML = '';
				}
			}, 3000);
		}
	}

	// Add new item
	const addForm = document.getElementById('addItemForm');
	if (addForm) {
		addForm.addEventListener('submit', async (e: Event) => {
			e.preventDefault();

			const nameInput = document.getElementById('itemName') as HTMLInputElement;
			const quantityInput = document.getElementById('itemQuantity') as HTMLInputElement;

			if (!nameInput || !quantityInput) {
				showMessage('Form elements not found.', 'error');
				return;
			}

			const name = nameInput.value.trim();
			const quantity = parseInt(quantityInput.value);

			if (!name || quantity < 1) {
				showMessage('Please enter a valid item name and quantity.', 'error');
				return;
			}

			try {
				const response = await fetch('/api/items', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({ name, quantity }),
				});

				if (response.ok) {
					const item = await response.json();
					const isNewItem = response.status === 201;

					showMessage(
						isNewItem
							? `Added "${item.name}" to your list!`
							: `Updated "${item.name}" quantity!`
					);

					// Reset form
					nameInput.value = '';
					quantityInput.value = '1';

					// Refresh page to show updated list
					setTimeout(() => {
						window.location.reload();
					}, 1000);
				} else {
					const error = await response.json();
					showMessage(error.message || 'Failed to add item.', 'error');
				}
			} catch (error) {
				showMessage('Something went wrong. Please try again.', 'error');
			}
		});
	}

	// Delete item function
	async function deleteItem(id: string): Promise<void> {
		if (!confirm('Are you sure you want to delete this item?')) {
			return;
		}

		try {
			const response = await fetch(`/api/items/${id}`, {
				method: 'DELETE',
			});

			if (response.ok) {
				showMessage('Item deleted successfully!');

				// Remove item from DOM
				const itemElement = document.querySelector(`[data-id="${id}"]`);
				if (itemElement) {
					itemElement.remove();
				}

				// Check if list is empty
				const itemList = document.getElementById('itemList');
				if (itemList && itemList.children.length === 0) {
					itemList.innerHTML = '<div class="empty">No items in your shopping list yet.</div>';
				}
			} else {
				const error = await response.json();
				showMessage(error.message || 'Failed to delete item.', 'error');
			}
		} catch (error) {
			showMessage('Something went wrong. Please try again.', 'error');
		}
	}

	// Add event listeners to delete buttons
	document.addEventListener('DOMContentLoaded', () => {
		const deleteButtons = document.querySelectorAll('button.delete');
		deleteButtons.forEach((button) => {
			button.addEventListener('click', (e: Event) => {
				const target = e.target as HTMLButtonElement;
				const id = target.dataset.id;
				if (id) {
					deleteItem(id);
				}
			});
		});
	});
</script>
</body>
</html>